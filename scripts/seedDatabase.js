const admin = require('firebase-admin');

// Sample data (inline to avoid import issues)
const sampleCategories = [
  {
    name: {
      en: 'Appetizers',
      fr: 'Entr√©es',
      vi: 'Khai V·ªã',
    },
    description: {
      en: 'Start your meal with our delicious appetizers',
      fr: 'Commencez votre repas avec nos d√©licieuses entr√©es',
      vi: 'B·∫Øt ƒë·∫ßu b·ªØa ƒÉn v·ªõi nh·ªØng m√≥n khai v·ªã ngon mi·ªáng',
    },
    icon: 'ü•¢',
    order: 1,
    active: true,
  },
  {
    name: {
      en: 'Main Dishes',
      fr: 'Plats Principaux',
      vi: 'M√≥n Ch√≠nh',
    },
    description: {
      en: 'Hearty and satisfying main courses',
      fr: 'Plats principaux copieux et satisfaisants',
      vi: 'Nh·ªØng m√≥n ch√≠nh th·ªãnh so·∫°n v√† th·ªèa m√£n',
    },
    icon: 'üçú',
    order: 2,
    active: true,
  },
  {
    name: {
      en: 'Sides',
      fr: 'Accompagnements',
      vi: 'M√≥n Ph·ª•',
    },
    description: {
      en: 'Perfect accompaniments to your meal',
      fr: 'Accompagnements parfaits pour votre repas',
      vi: 'Nh·ªØng m√≥n ƒÉn k√®m ho√†n h·∫£o cho b·ªØa ƒÉn',
    },
    icon: 'üçö',
    order: 3,
    active: true,
  },
  {
    name: {
      en: 'Beverages',
      fr: 'Boissons',
      vi: 'ƒê·ªì U·ªëng',
    },
    description: {
      en: 'Refreshing drinks to complement your meal',
      fr: 'Boissons rafra√Æchissantes pour accompagner votre repas',
      vi: 'Nh·ªØng th·ª©c u·ªëng t∆∞∆°i m√°t b·ªï sung cho b·ªØa ƒÉn',
    },
    icon: 'ü•§',
    order: 4,
    active: true,
  },
];

// Initialize Firebase Admin
const serviceAccount = require('../firebase-service-account.json'); // You'll need to download this from Firebase Console

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
});

const db = admin.firestore();

async function seedDatabase() {
  console.log('üå± Starting database seeding...');

  try {
    // Seed categories first and get their IDs
    console.log('üìÇ Seeding categories...');
    const categoryIds = {};
    const categoryNames = ['appetizers', 'main-dishes', 'sides', 'beverages'];
    
    for (let i = 0; i < sampleCategories.length; i++) {
      const category = sampleCategories[i];
      const docRef = db.collection('categories').doc();
      await docRef.set({
        ...category,
        id: docRef.id,
      });
      categoryIds[categoryNames[i]] = docRef.id;
      console.log(`‚úÖ Added category: ${category.name.en} (ID: ${docRef.id})`);
    }

    console.log(`‚úÖ Successfully seeded ${Object.keys(categoryIds).length} categories`);

    // Sample menu items with proper category mapping
    const sampleMenuItems = [
      // Appetizers
      {
        name: { en: 'Nem R√°n (Spring Rolls)', fr: 'Rouleaux de Printemps Frits', vi: 'Nem R√°n' },
        description: {
          en: 'Crispy golden spring rolls filled with pork, shrimp, and vegetables. Served with sweet and sour dipping sauce.',
          fr: 'Rouleaux de printemps dor√©s et croustillants farcis de porc, crevettes et l√©gumes. Servis avec sauce aigre-douce.',
          vi: 'Nem r√°n gi√≤n v√†ng nh√¢n th·ªãt heo, t√¥m v√† rau c·ªß. ƒÇn k√®m n∆∞·ªõc ch·∫•m chua ng·ªçt.',
        },
        price: 8.99,
        category: 'appetizers',
        image: '/images/nem-ran.jpg',
        ingredients: ['pork', 'shrimp', 'vegetables', 'rice paper'],
        spiceLevel: 1,
        popular: true,
        available: true,
        allergens: ['shellfish'],
        nutritionalInfo: { calories: 180, protein: 12, carbs: 15, fat: 8 },
      },
      {
        name: { en: 'G·ªèi Cu·ªën (Fresh Spring Rolls)', fr: 'Rouleaux de Printemps Frais', vi: 'G·ªèi Cu·ªën' },
        description: {
          en: 'Fresh rice paper rolls with shrimp, herbs, lettuce, and vermicelli noodles. Served with peanut dipping sauce.',
          fr: 'Rouleaux de papier de riz frais avec crevettes, herbes, laitue et vermicelles. Servis avec sauce aux arachides.',
          vi: 'B√°nh tr√°ng cu·ªën t√¥m th·ªãt v·ªõi rau th∆°m, x√† l√°ch v√† b√∫n. ƒÇn k√®m n∆∞·ªõc ch·∫•m ƒë·∫≠u ph·ªông.',
        },
        price: 7.99,
        category: 'appetizers',
        image: '/images/goi-cuon.jpg',
        ingredients: ['shrimp', 'herbs', 'lettuce', 'rice noodles'],
        spiceLevel: 1,
        popular: true,
        available: true,
        allergens: ['shellfish', 'peanuts'],
        nutritionalInfo: { calories: 120, protein: 8, carbs: 18, fat: 3 },
      },
      // Main Dishes
      {
        name: { en: 'Ph·ªü B√≤ (Beef Pho)', fr: 'Soupe de B≈ìuf Ph·ªü', vi: 'Ph·ªü B√≤' },
        description: {
          en: 'Traditional Vietnamese beef noodle soup with aromatic broth, rice noodles, and fresh herbs.',
          fr: 'Soupe traditionnelle vietnamienne au b≈ìuf avec bouillon aromatique, nouilles de riz et herbes fra√Æches.',
          vi: 'Ph·ªü b√≤ truy·ªÅn th·ªëng v·ªõi n∆∞·ªõc d√πng th∆°m ngon, b√°nh ph·ªü v√† rau th∆°m.',
        },
        price: 12.99,
        category: 'main-dishes',
        image: '/images/pho-bo.jpg',
        ingredients: ['beef', 'rice noodles', 'herbs', 'onions'],
        spiceLevel: 2,
        popular: true,
        available: true,
        allergens: [],
        nutritionalInfo: { calories: 450, protein: 25, carbs: 55, fat: 12 },
      },
      {
        name: { en: 'B√∫n B√≤ Hu·∫ø', fr: 'Soupe de B≈ìuf √âpic√©e de Hu·∫ø', vi: 'B√∫n B√≤ Hu·∫ø' },
        description: {
          en: 'Spicy beef noodle soup from Hue with lemongrass, chili oil, and thick rice noodles.',
          fr: 'Soupe de nouilles au b≈ìuf √©pic√©e de Hu·∫ø avec citronnelle, huile de piment et nouilles de riz √©paisses.',
          vi: 'B√∫n b√≤ Hu·∫ø cay n·ªìng v·ªõi s·∫£, d·∫ßu ·ªõt v√† b√∫n to.',
        },
        price: 13.99,
        category: 'main-dishes',
        image: '/images/bun-bo-hue.jpg',
        ingredients: ['beef', 'thick rice noodles', 'lemongrass', 'chili oil'],
        spiceLevel: 4,
        popular: true,
        available: true,
        allergens: [],
        nutritionalInfo: { calories: 520, protein: 28, carbs: 58, fat: 18 },
      },
      // Sides
      {
        name: { en: 'X√¥i V√≤ (Sticky Rice)', fr: 'Riz Gluant aux Haricots Mungo', vi: 'X√¥i V√≤' },
        description: {
          en: 'Sticky rice with mung beans, coconut, and peanuts. A traditional Vietnamese comfort food.',
          fr: 'Riz gluant aux haricots mungo, noix de coco et arachides. Un plat r√©confortant vietnamien traditionnel.',
          vi: 'X√¥i v√≤ v·ªõi ƒë·∫≠u xanh, d·ª´a v√† ƒë·∫≠u ph·ªông. M√≥n ƒÉn d√¢n d√£ truy·ªÅn th·ªëng.',
        },
        price: 4.99,
        category: 'sides',
        image: '/images/xoi-vo.jpg',
        ingredients: ['sticky rice', 'mung beans', 'coconut', 'peanuts'],
        spiceLevel: 0,
        popular: false,
        available: true,
        allergens: ['peanuts'],
        nutritionalInfo: { calories: 220, protein: 6, carbs: 42, fat: 5 },
      },
      // Beverages
      {
        name: { en: 'C√† Ph√™ S·ªØa ƒê√° (Iced Coffee)', fr: 'Caf√© Glac√© au Lait Concentr√©', vi: 'C√† Ph√™ S·ªØa ƒê√°' },
        description: {
          en: 'Strong Vietnamese coffee with sweetened condensed milk served over ice.',
          fr: 'Caf√© vietnamien fort avec lait concentr√© sucr√© servi sur glace.',
          vi: 'C√† ph√™ phin ƒë·∫≠m ƒë√† v·ªõi s·ªØa ƒë·∫∑c ng·ªçt v√† ƒë√°.',
        },
        price: 3.99,
        category: 'beverages',
        image: '/images/ca-phe-sua-da.jpg',
        ingredients: ['Vietnamese coffee', 'condensed milk', 'ice'],
        spiceLevel: 0,
        popular: true,
        available: true,
        allergens: ['dairy'],
        nutritionalInfo: { calories: 120, protein: 3, carbs: 18, fat: 4 },
      },
    ];

    // Seed menu items with proper category IDs
    console.log('üçú Seeding menu items...');
    const menuItemPromises = sampleMenuItems.map(async (item) => {
      const docRef = db.collection('menuItems').doc();
      await docRef.set({
        ...item,
        id: docRef.id,
        category: categoryIds[item.category], // Map to actual category ID
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
      });
      console.log(`‚úÖ Added menu item: ${item.name.en}`);
      return docRef.id;
    });

    const menuItemIds = await Promise.all(menuItemPromises);
    console.log(`‚úÖ Successfully seeded ${menuItemIds.length} menu items`);

    // Create sample user (optional)
    console.log('üë§ Creating sample admin user...');
    const sampleUser = {
      email: 'admin@saigonkitchen.com',
      name: 'Admin User',
      addresses: [],
      preferences: {
        language: 'en',
        spiceLevel: 2,
        dietaryRestrictions: [],
        favoriteItems: [],
      },
      orderHistory: [],
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp(),
    };

    await db.collection('users').doc('admin').set(sampleUser);
    console.log('‚úÖ Created sample admin user');

    console.log('üéâ Database seeding completed successfully!');
    console.log(`üìä Summary:`);
    console.log(`   - Categories: ${Object.keys(categoryIds).length}`);
    console.log(`   - Menu Items: ${menuItemIds.length}`);
    console.log(`   - Users: 1`);
    console.log(`üìã Category Mapping:`);
    Object.entries(categoryIds).forEach(([name, id]) => {
      console.log(`   - ${name}: ${id}`);
    });

  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
    process.exit(1);
  }

  process.exit(0);
}

// Run the seeding script
seedDatabase();
